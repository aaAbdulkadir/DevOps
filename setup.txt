 configure name and email

    git config --global user.name "First Last"

    git config --global user.email email@email.com

add vsc to path

    git config --global core.editor "code --wait"

open up editor to see git config file

    git config --global -e

how git should handle end of lines (windows /r/n mac/linux /n)

    git config --global core.autocrlf input <-- mac/linux
    git config --global core.autocrlf true <-- windows

add directory to git

firstly initialise git

    git init

        # this creates a directory called .git 
        # ls -a <-- shows this in terminal

    open .git <-- see what is inside it


make couple files for testing

check git status

    git status <-- shows the files that are untracked

add untracked files to staging area

    git add git_learning.txt git_learning_2.txt

now these files are in the staging area

    git status

comitting changes

    git commit -m "Initial commit"

if message is long write 

    git commit

this will open up your editor to where you can type your message for the commit

how to commit file and skip staging area:

    git commit -am "my message" <-- -a means all modified files. Git add is skipped

how to remove a file from your git

    rm git_learning_2.txt
    git status

    git ls-files <--  files in staging area

    git add git_learning_2.txt <-- adds the deleted file to staging area i.e. removes init
    git status
    git ls-files

    git commit -m "Removed a file"


how to remove file from working directory and staging area at once

    git rm git_learning_2.txt

renaming/moving files

    mv git_learning.txt node.js
    git status <-- see changes

    git add git_learning.txt <-- stage the deletion
    git add node.js <-- add name of new file
    git status <-- see changes

do both at once

    git mv node.js main.py

commit changes

    git commit -m "changed file from js to py"

ignoring files that may be sensitive

    echo "password" > password.txt

    -- create a gitignore file
    
    echo "password.txt" > .gitignore

    git add .gitignore

    git commit -m "added a gitignore file"

if you accidentally commit a file that was meant to be git ignore,
you have to delete it from the staging area otherwise it is 
being tracked

    git rm --cached -r password.txt <-- removes file from staging area (index)

github/gitignore has templates for gitignore files for each use changes

short status

    git status -s <-- makes the status print short

view staged and unstaged changes

    git diff --staged

setting difftool on vscode for git to track changes on vscode

    git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"

    git config --global -e <-- check if it worked

    IF THIS DOESNT WORK 

        git config --global -e

        ADD

        [diff]
            tool = vscode
        [difftool "vscode"]
            cmd = code --wait --diff $LOCAL $REMOTE

    git difftool
    git difftool --staged

viewing history

    git log

    git log --online <-- shorter version
    git log --online --reverse <-- order reveresed

master is the main branch, head is the reference to the current branch being worked on

how to view the content of a git commit

    git log --oneline <-- get id

    git show {id}

to check the commit without id

    git show HEAD~1 <-- this starts from the commit at the head i.e. oldest

how to see files in a tree format

    git ls-tree HEAD~1

unstaging files

    git restore --staged {name} <-- anything that is staged i.e. green will be unstaged 

discarding local changes

    git restore {name}

to remove untracked files

    git clean -h <-- help to see commands, this is a DANGEROUS COMMAND as yuo cannot recover it once done

    git clean -fd {name}

restore file to an earlier version

after deleting a file 

    git restore --source=HEAD~1 {name}

--------------------------------------

connecting to github:


    genereate ssh key pairs

        mkdir ~/.ssh
        ssh-keygen -t rsa -b 4096 -C email.address@hotmail.com

    put public key in github