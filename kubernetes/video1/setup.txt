Minikube is a lightweight Kubernetes implementation that creates a VM on your local machine and deploys a simple cluster containing only one node.

----------------------------

turn docker on

install minikube: https://minikube.sigs.k8s.io/docs/start/

in terminal

    - curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    - sudo install minikube-linux-amd64 /usr/local/bin/minikube

    - minikube start --driver docker

check if it is running

    - minikube status

interract with cluster with kubectl cli

    - kubectl get node


-----------------------------

PROJECT 1: DEPLOY WEB APP WITH DB

    create a mongo db config yaml file

        mongo-config.yaml

        search config map kubernetes on google 
        https://kubernetes.io/docs/concepts/configuration/configmap/

        copy the first 5 lines

    create a mongo secret yaml file for username and password

        google secrets kubernetes

        https://kubernetes.io/docs/concepts/configuration/secret/
        
        copy a secret template

        encode username and password

            echo -n mongouser | base64

                copy it 

            echo -n mongopassword | base64

                copy it into mongo config file

    mongo deployment

        create a mongo yaml file

        google deployment kubernetes

        https://kubernetes.io/docs/concepts/workloads/controllers/deployment/

        copy the first template

        get mongo db image and put it in containers section, like docker compose

        change port to what mongodb listens at i..e 27017

        change labels in meta data section

        selector states which pod belongs to deployment 

            change label name to match app in template, spec and meta data

        replicas is how many pods you want 

            put 1 as it is a db and to scale db in kubernetes you use statefulset and not deployment

    **to have multiple yaml configs in one, use '---' to seperate them

    mongo service 

        google service kubernetes 
        
        https://kubernetes.io/docs/concepts/services-networking/service/

        copy first underneath ---

        the end point is the name of the service, so change the name to match the name of the data line i.e. mongo-url: mongo-service in the config file

        change selector app name  in service config in mongo yaml to the same app name as deployment

        change ports

            change targetPort to the port of the pods i.e. 27017

            targetPort = containerPort

            change port to the same to simplify this 

    create a webapp yaml file

        past mongo yaml file into here and change word mongo to webapp

        change image to web app from nanajanashia i.e. nanajanashia/k8s-demo-app:v1.0 which is a simple webapp

        change port to node js 3000

    pass secret data to mongo deployment

        add mongo username and password in environment inside containers 

    connect webapp to db 

        image expects the data 

        go to webapp yaml and under containers add env

    under second config in webapp, add type and make it nodeport

        has to be in range of 30000 to 32767

    on terminal 

        kubectl get pod

    you will see there is no resources so create one

        kubectl apply -f mongo-config.yaml
        kubectl apply -f mongo-secret.yaml
        kubectl apply -f mongo.yaml
        kubectl apply -f webapp.yaml

    interacting with k8 clusters 

        kubectl get all 

        kubectl get configmap
        kubectl get secret

    if you want to see cl commands

        kubectl


    check pods

        kubectl pod

    kubectl describe pod {id}

    kubectl logs 

    kubectl get svc

    minikube ip

    kubectl get node 

    kubectl get pod -o wide

with minikube ip address you can open web page

    ip:30000

    




        
        

        
